using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace Halcyon.Utils
{
    public static class ILInfo
    {
        public static readonly HashSet<string> ilKeywords = BuildKeywordList(new string[]
		{
			"abstract",
			"algorithm",
			"alignment",
			"ansi",
			"any",
			"arglist",
			"array",
			"as",
			"assembly",
			"assert",
			"at",
			"auto",
			"autochar",
			"beforefieldinit",
			"blob",
			"blob_object",
			"bool",
			"brnull",
			"brnull.s",
			"brzero",
			"brzero.s",
			"bstr",
			"bytearray",
			"byvalstr",
			"callmostderived",
			"carray",
			"catch",
			"cdecl",
			"cf",
			"char",
			"cil",
			"class",
			"clsid",
			"const",
			"currency",
			"custom",
			"date",
			"decimal",
			"default",
			"demand",
			"deny",
			"endmac",
			"enum",
			"error",
			"explicit",
			"extends",
			"extern",
			"false",
			"famandassem",
			"family",
			"famorassem",
			"fastcall",
			"fault",
			"field",
			"filetime",
			"filter",
			"final",
			"finally",
			"fixed",
			"float",
			"float32",
			"float64",
			"forwardref",
			"fromunmanaged",
			"handler",
			"hidebysig",
			"hresult",
			"idispatch",
			"il",
			"illegal",
			"implements",
			"implicitcom",
			"implicitres",
			"import",
			"in",
			"inheritcheck",
			"init",
			"initonly",
			"instance",
			"int",
			"int16",
			"int32",
			"int64",
			"int8",
			"interface",
			"internalcall",
			"iunknown",
			"lasterr",
			"lcid",
			"linkcheck",
			"literal",
			"localloc",
			"lpstr",
			"lpstruct",
			"lptstr",
			"lpvoid",
			"lpwstr",
			"managed",
			"marshal",
			"method",
			"modopt",
			"modreq",
			"native",
			"nested",
			"newslot",
			"noappdomain",
			"noinlining",
			"nomachine",
			"nomangle",
			"nometadata",
			"noncasdemand",
			"noncasinheritance",
			"noncaslinkdemand",
			"noprocess",
			"not",
			"not_in_gc_heap",
			"notremotable",
			"notserialized",
			"null",
			"nullref",
			"object",
			"objectref",
			"opt",
			"optil",
			"out",
			"permitonly",
			"pinned",
			"pinvokeimpl",
			"prefix1",
			"prefix2",
			"prefix3",
			"prefix4",
			"prefix5",
			"prefix6",
			"prefix7",
			"prefixref",
			"prejitdeny",
			"prejitgrant",
			"preservesig",
			"private",
			"privatescope",
			"protected",
			"public",
			"record",
			"refany",
			"reqmin",
			"reqopt",
			"reqrefuse",
			"reqsecobj",
			"request",
			"retval",
			"rtspecialname",
			"runtime",
			"safearray",
			"sealed",
			"sequential",
			"serializable",
			"special",
			"specialname",
			"static",
			"stdcall",
			"storage",
			"stored_object",
			"stream",
			"streamed_object",
			"string",
			"struct",
			"synchronized",
			"syschar",
			"sysstring",
			"tbstr",
			"thiscall",
			"tls",
			"to",
			"true",
			"typedref",
			"unicode",
			"unmanaged",
			"unmanagedexp",
			"unsigned",
			"unused",
			"userdefined",
			"value",
			"valuetype",
			"vararg",
			"variant",
			"vector",
			"virtual",
			"void",
			"wchar",
			"winapi",
			"with",
			"wrapper",
			"property",
			"type",
			"flags",
			"callconv",
			"strict"
		});
        public static HashSet<string> BuildKeywordList(params string[] keywords)
        {
            HashSet<string> hashSet = new HashSet<string>(keywords);
            FieldInfo[] fields = typeof(OpCodes).GetFields();
            for (int i = 0; i < fields.Length; i++)
            {
                FieldInfo fieldInfo = fields[i];
                hashSet.Add(((OpCode)fieldInfo.GetValue(null)).Name);
            }
            return hashSet;
        }
    }

}
